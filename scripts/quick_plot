#!/usr/bin/env python
"""
Quickly plot a field from a netCDF file.

"""

import logging
logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger()

import inspect
import os
import sys
import xray
from itertools import product

import matplotlib.pyplot as plt
import seaborn as sns
import marc_analysis.plot as maplt

import click


class PlotConfig(object):
    """ Container to pass plot configuration options to sub-commands. """
    def __init__(self, field, in_fn, cases=[], out_fn=""):
        logger.info("Quick plot config: ")
        self.field = field
        logger.info("   field: " + field)
        self.in_fn = in_fn
        logger.info("   in.nc: " + in_fn)
        self.cases = cases
        self.out_fn = out_fn
        self.show = not out_fn
        if not self.show:
            logger.info("     out: " + out_fn)

        self.case_dict = self.process_cases(cases)

    def set_cases(self, cases):
        logger.debug("PlotConfig: Resetting cases to {}".format(cases))
        self.cases = cases
        self.case_dict = self.process_cases(cases)

    @staticmethod
    def process_cases(cases):
        """ Process 'cases' argument supplied to the argument parser. See
        __doc__ in `cli()` for more complete information. """
        logger.info("Processing cases:")

        case_dict = {}
        if not cases:
            logger.debug("PlotConfig: ... none specified")
            return case_dict

        # cases1 = ["act=arg_comp", ]
        # result1 = {'act': ['arg_comp', ]}
        # cases2 = ["act=arg_comp", "lev=30"]
        # result2 = {'act':['arg_comp', ], 'lev': ['30', ]}
        # cases3 = ["act=arg_comp,nenes_comp", ]
        # result1 = {'act': ['arg_comp', 'nenes_comp']}
        # cases4 = ["act=arg_comp,nenes_comp", "lev=30,28"]
        # result2 = {'act':['arg_comp', 'nenes_comp',], 'lev': ['30', '28',]}

        for i, case in enumerate(cases, 1):
            dim, vals = case.split("=")
            vals = vals.split(",")
            logger.info("   {}) {} = {}".format(i, dim, vals))
            case_dict[dim] = vals

        return case_dict

    @staticmethod
    def _get_itercases(case_dict):
        """ Generator for iterating over all the selectors for
        extracting individual cases from the datset. """
        dims, vals = case_dict.keys(), case_dict.values()
        single_cases = [dict(zip(dims, _vals_subset))
                        for _vals_subset in product(*vals)]

        for case in single_cases:
            yield case

    def itercases(self):
        return self._get_itercases(self.case_dict)


pass_cfg = click.make_pass_decorator(PlotConfig, ensure=True)


# Utility functions
def read_field_from_file(field, in_fn):
    """ Read a specific field from a netCDF file. """
    logger.debug("Reading '{}' from {}".format(field, in_fn))
    data = xray.open_dataset(in_fn, decode_times=False)[field]
    print_dict(data.attrs, field)
    return data


def save_figure(fig, out_fn):
    """ Save a figure with presets for different output
    qualities. """
    logger.debug("Saving to {}".format(out_fn))

    _, fmt = os.path.splitext(out_fn)
    fmt = fmt[1:] # Strip off '.'

    fig_dict = {'bbox_inches': 'tight', 'transparent': True, 'bbox_inches': 'tight'}
    if fmt == "png":
        fig_dict['dpi'] = 150
    elif fmt == "pdf":
        pass
    else:
        raise ValueError("Output format should be either 'png'"
                         " or 'pdf', got {}".format(fmt))
    print_dict(fig_dict, "Output")

    fig.savefig(out_fn, **fig_dict)
    logger.debug("... done")


def print_dict(d, title='', tab="   "):
    """ Pretty-print a dictionary 'd' to the console. """
    if title:
        logger.debug("\n"+title)
        logger.debug("-"*len(title))
    for key, val in d.items():
        logger.debug(tab + "{}: {}".format(key, val))


# Command-line interface
@click.group()
@click.argument("in_fn", metavar="<in.nc>", type=click.Path(exists=True))
@click.argument("field", metavar="<field>")
@click.option("-c", "--cases",
              metavar="[--cases <dim1>[=val1(,val2,...)] [...]]",
              multiple=True, type=str)
@click.option("-d", "--debug", is_flag=True,
              help="Enable debug/verbose logging")
@click.option("-o", "--out", type=str,
              help="Name of output figure, if user wished to save it.")
@click.pass_context
def plotter(ctx, in_fn, field, cases, debug, out):
    """
    Quickly plot a field from a netCDF file.

    ------------------------------------------------------------------------

    \b
    Output
    ------

    \b
    The script can either immediately display a plot, or save it to disk, but
    these behaviors are mutually exclusive. To save a a figure, pass an output
    filename to the option '-o/--out'. The format and settings will be
    inferred from the extension of the file.

    \b
    Dimension Selection
    -------------------

    \b
    This script implements a crude scheme to select what subsets of data in a
    given file the user wants to plot, based on the dimensional selection
    notation from xray. In general, this option must be explicitly passed
    (following the examples below). The option '-c/--cases' implements this
    logic as follows:

        quick_plot [--cases <dim1>[=val1(,val2,...)] [...]] <in.nc> ...

    Starting with the simplest case,

        quick_plot --cases dim1=val1 <in.nc> ...

    \b
    this is equivalent to the xray call `ds.sel(dim1=val1)`. Additional values
    of that same dimension can be supplied by separating them with a comma,

        quick_plot --cases dim1=val1,val2,... <in.nc> ...

    \b
    which is equivalent to the xray call `ds.sel(dim1=[val1,val2,...]). This
    sort of selection can be combined with as many different dimensions as one
    wants as long as they're separated by a blank space. So an example of a
    more complex selection might be:

        quick_plot --cases aer=PD act=arg_comp,nenes_comp,pcm_comp <in.nc> ...

    \b
    Generally speaking, the plotter will use the cartesian product of these
    case selectors when subsetting data from a given file. In some cases,
    though, only a single case is plotted; if the user specifies more than
    one, then only the first one will be plotted and a warning will be
    issued.

    \b
    Arguments:
        in.nc         Input netCDF filename, containing the field to plot
        field         Field to plot from the input file


    """
    if debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Debug logging enabled")

    if not out:
        logger.debug("Disabling file saving; enabling interactive mode")
        plt.ion()
    else:
        plt.ioff()

    ctx.obj = PlotConfig(field=field, in_fn=in_fn, cases=cases,
                         out_fn=out)


@plotter.command()
@click.option("-p", "--projection", default="PlateCarree",
              help="Map projection; defaults to PlateCarree")
@click.option("-l", "--lims", nargs=2, type=float,
              help="Colorbar low/high limit")
@click.option("--cmap", type=str,
              help="Name of palette/colormap for plotting")
@click.option("-m", "--method", type=str, default='contourf',
              help="matplotlib plotting method to use")
@click.option("-r", "--robust", type=float, default=2.0,
              help="Use robust colorbar limit detection; else, uses min/max")
@pass_cfg
def horiz(cfg, projection, lims, cmap, method, robust):
    """
    \b
    Global horizontal plot of a <field> from the file <in.nc>. If
    passed as an argument, will save the resulting plot in [plot_filename]

    \b
    If '--levels' isn't passed, will automatically infer reasonable
    colorbar limits. Else, must pass the low and high thresholds
    for constructing the colorbar (vmin/vmax). Additionally, only a single
    case will be plotted per run of this tool.

    """
    logger.info("\nGLOBAL PLOT - HORIZONTAL")

    # Read in file
    darray = read_field_from_file(cfg.field, cfg.in_fn)

    # Get plot aesthetic details
    cmap_kws = dict(levels=21, robust=robust, extend='both')
    if lims:
        cmap_kws['vmin'] = min(lims)
        cmap_kws['vmax'] = max(lims)
    if cmap:
        cmap_kws['cmap'] = cmap
    cmap_kws = maplt.infer_cmap_params(darray, **cmap_kws)
    print_dict(cmap_kws, "Plot aesthetics")

    # Iterate over the selected cases
    logger.debug("\nselecting case...")
    if cfg.cases:
        case = next(cfg.itercases())
        logger.debug("case: {}".format(case))
        d_case = darray.sel(**case).load()
        title_str = " ".join(["{}={}".format(dim, val)
                              for dim, val in case.items()])
    else:
        logger.debug("case: No specific cases requested")
        d_case = darray.load()
        title_str = ""

    # Actual plot logic
    logger.debug("\nCreating plot...")
    try:
        ax, gp = maplt.geo_plot(d_case, method=method, projection=projection,
                                **cmap_kws)
    except:
        # The plotting method doesn't like all the cmap_kws, so just use
        # vmin/vmax and cmap
        ax, gp = maplt.geo_plot(d_case, method=method, projection=projection,
                                vmin=cmap_kws['vmin'], vmax=cmap_kws['vmax'],
                                cmap=cmap_kws['cmap'])

    fig = ax.get_figure()
    cb = maplt.add_colorbar(gp, fig=fig, orientation='vertical',
                            pad=0.02, shrink=0.15)
    try:
        cb.set_label("[{}]".format(d_case.units), labelpad=10,
                     rotation=270)
        plt.draw()
    except:
        logger.debug("no units found for labelling colorbar")
        pass
    ax.set_title(title_str, loc='right')
    ax.set_title(cfg.field, loc='left')

    # Output handling
    if cfg.show:
        plt.show(block=True)
    else:
        save_figure(fig, cfg.out_fn)


@plotter.command()
@click.argument("dim", metavar="<dim>", type=str)
@click.option("-l", "--lims", nargs=2, type=float,
              help="Colorbar low/high limit")
@click.option("--add-zero", is_flag=True,
              help="Plot the line y=0 on the figure")
@click.option("--palette", type=str,
              help="Seaborn or Matplotlib color palette to use")
@click.option("--plot-kwargs", multiple=True, type=str,
              help="Additional keyword arguments")
@pass_cfg
def line(cfg, dim, lims, add_zero, palette, plot_kwargs):
    """
    \b
    Quick line plot as a function of a given dim. Additional keyword arguments
    to control the plot aesthetics can be passed using the "--plot-kwargs" flag
    like this:

        ./quick_plot ... line <dim> --plot-kwargs lw=2 linestyle='dotted'

    \b
    Some specified dimensions have pre-defined styles. For instance:
        'lat' - zonal plot
        'time' - timeseries plot with date-format axis

    \b
    Arguments:
        dim    Dimension to plot along.

    """
    logger.info("\nLINE PLOT - {}".format(dim))

    # Read in file
    darray = read_field_from_file(cfg.field, cfg.in_fn).squeeze()

    # Iterate over the selected cases
    logger.debug("\nCases -")
    if cfg.cases:
        # Cases were explicitly passed
        cases = []
        for case in cfg.itercases():
            cases.append(case)
            logger.debug("   {}".format(case))
    else:
        # Construct cases based on what's in the dataset
        all_coords = list(darray.coords)
        all_coords.remove(dim)

        cases = []
        try:
            case_dict = {case: darray[case].values for case in all_coords}
            for case in cfg._get_itercases(case_dict):
                cases.append(case)
                logger.debug("   {}".format(case))
        except:
            logger.debug("... there were no extra cases to consider plotting")

    if palette:
        # Customize the color palette, if requested. Best to do it here
        # after we know how many cases, so we can use the best set of
        # choices from the requested palette.
        sns.set_palette(palette, len(cases))

    # Plot each case
    logger.debug("\nCreating plot...")
    fig, axes = maplt.multipanel_figure(1, 1, size=4.)
    ax = axes[0, 0]

    # Process addtional kwargs
    kwargs = {}
    for token in plot_kwargs:
        key, val = token.split("=")
        try:
            val = float(val)
        except:
            pass
        kwargs[key] = val

    colors = {}
    for i, case in enumerate(cases):
        case_label = "_".join(map(str, case.values()))
        logger.debug("   {}) {}".format(i+1, case_label))
        d_case = darray.sel(**case).load()

        ax, lp = maplt.line_plot(d_case, dim=dim, label=case_label, ax=ax,
                                 **kwargs)

        colors[case_label] = lp[0].get_color()
    if not cases:
        ax, lp = maplt.line_plot(darray, dim=dim, ax=ax,
                                 **kwargs)

    if lims:
        ax.set_ylim(lims[0], lims[1])

    if colors:
        _ = maplt.colortext_legend(colors, loc='upper left', frameon=False,
                                   bbox_to_anchor=[0.92, 1.0], fontsize=12)

    if add_zero:
        xlims = ax.get_xlim()
        ax.hlines(0., xlims[0], xlims[-1], color='k', linestyle='dashed')

    # Output handling
    if cfg.show:
        plt.show(block=True)
    else:
        save_figure(fig, cfg.out_fn)


if __name__ == "__main__":
    plotter()
